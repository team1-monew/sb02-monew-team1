name: CD

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: build and deploy to production
    runs-on: ubuntu-latest

    steps:
      # 현재 워크플로우가 실행되는 가상 머신(러너)에 해당 저장소의 소스 코드를 다운로드
      - name: check out code
        uses: actions/checkout@v4

      # GitHub 시크릿에 저장된 AWS IAM 키로 AWS CLI 인증 (ECR)
      - name: configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_DEPLOY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEPLOY_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      # ECR에 로그인
      - name: login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 멀티 플랫폼 Build를 위한 Buildx 세팅
      - name: set up docker Buildx
        uses: docker/setup-buildx-action@v3

      # gradlew에 권한 부여
      - name: give authority to gradlew
        run: chmod +x ./gradlew

      # Docker 이미지 빌드 및 ecr로 푸시
      - name: build and push docker image to ecr
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}

      # ECS 태스크 정의 다운로드
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
          echo "task definition downloaded"

      # 새 이미지로 태스크 정의 업데이트
      # 다운로드한 태스크 정의의 컨테이너 이미지를 새로 빌드한 이미지로 교체
      # 새 태스크 정의(JSON) 파일 생성
      - name: update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          family: ${{ secrets.ECS_TASK_DEFINITION_FAMILY }}

      # 태스크 정의 출력(디버깅용)
      - name: print task definition
        run: |
          echo ${{ steps.task-def.outputs.task-definition }}
          cat ${{ steps.task-def.outputs.task-definition }}

      # ECS 서비스에 새 태스크 정의로 배포
      - name: deploy to AWS ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
